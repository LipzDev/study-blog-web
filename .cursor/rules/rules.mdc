---
alwaysApply: true
---

Você é um especialista em Next.js 15, TypeScript, React 19, Tailwind CSS, React Hook Form, Zod.

## Princípios Fundamentais

- Escreva código TypeScript conciso e técnico com exemplos precisos
- Use programação funcional e declarativa. Evite classes
- Prefira iteração e modularização ao invés de duplicação
- Use nomes descritivos de variáveis com verbos auxiliares (ex: isLoading, hasError)
- Favoreça named exports para componentes
- Use o padrão RORO (Receive an Object, Return an Object)

## JavaScript/TypeScript

- Use a palavra-chave "function" para funções puras. Omita ponto e vírgula
- Use TypeScript para todo código. Prefira interfaces ao invés de types
- Evite enums, use objects ou maps quando possível
- Estrutura de arquivo: Componente exportado, subcomponentes, helpers, conteúdo estático, tipos
- Evite chaves desnecessárias em condicionais
- Para declarações de uma linha em condicionais, omita chaves
- Use sintaxe concisa de uma linha para declarações condicionais simples

## Tratamento de Erros e Validação

- Priorize tratamento de erros e casos extremos:
  - Trate erros e casos extremos no início das funções
  - Use early returns para condições de erro para evitar if statements aninhados
  - Coloque o happy path por último na função para melhor legibilidade
  - Evite else statements desnecessários; use padrão if-return
  - Use guard clauses para tratar pré-condições e estados inválidos cedo
  - Implemente logging adequado de erros e mensagens amigáveis ao usuário

## React/Next.js Específico do Projeto

- Use componentes funcionais e interfaces TypeScript
- Use JSX declarativo
- Use function, não const, para componentes
- Use Tailwind CSS para estilização (NÃO use Shadcn UI)
- Implemente design responsivo com Tailwind CSS
- Coloque conteúdo estático e interfaces no final do arquivo
- Use variáveis de conteúdo para conteúdo estático fora das funções de render
- Minimize 'use client', 'useEffect', e 'setState'. Favoreça RSC
- Use Zod para validação de formulários com React Hook Form
- Envolva componentes client em Suspense com fallback
- Use carregamento dinâmico para componentes não críticos

### API e Dados
- Use axios para requisições HTTP
- Implemente error handling consistente
- Use tipos TypeScript para todas as respostas de API
- Siga padrões de transformação de dados em utils/
- Para dados de WebSocket, use funções de conversão específicas

### Estilização
- Use Tailwind CSS exclusivamente
- Siga padrões de design responsivo mobile-first
- Use classes utilitárias ao invés de CSS customizado
- Mantenha consistência com o design system
- Use gap ao invés de justify-between para layouts alinhados

### Testes
- Use Jest e Testing Library
- Foque em testes de comportamento, não implementação
- Use data-testid quando necessário para seletores (data-testid="error-${fieldName}")
- Mantenha cobertura alta (90%+) mas priorize qualidade
- Priorize confiabilidade e manutenibilidade dos testes

### Estrutura de Arquivos

src/
├── app/[locale]/(app)/          # Páginas Next.js App Router
├── components/                  # Componentes reutilizáveis
├── hooks/                      # Custom hooks
├── utils/                      # Funções utilitárias
├── types/                      # Definições TypeScript
└── schemas/                    # Schemas Zod


## Convenções Específicas

### Imports
- Organize imports: React, Next.js, bibliotecas externas, imports internos
- Use imports absolutos com @ para src/
- Prefira named imports
- Use ferramentas de organização de imports consistentemente

### Error Handling
- Use try-catch apenas quando necessário
- Implemente error boundaries para erros inesperados
- Use estados de erro específicos nos stores
- Forneça feedback visual adequado para usuários
- Evite try-catch desnecessários quando success e error fazem a mesma ação

### Performance
- Use React.memo apenas quando necessário
- Implemente lazy loading para componentes pesados
- Otimize imagens (WebP, lazy loading)
- Minimize re-renders desnecessários
- Questione se useMemo é necessário vs otimizações automáticas do React 19

## Preferências Gerais

- Evite try-catch desnecessários quando ambos os caminhos fazem a mesma ação
- Documentação e conteúdo em português
- Use hashmap/object literals para renderização condicional ao invés de ternários aninhados
- Use enums ao invés de string literals para type safety
- Prefira passar objetos completos ao invés de destructuring
- Use gerenciadores de pacotes ao invés de editar arquivos de configuração manualmente
- Priorize experiência do usuário, segurança dos dados de pagamento, e manutenibilidade do código

Sempre mantenha foco na experiência do usuário, segurança dos dados, e manutenibilidade do código.
